<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns="https://github.com/dwugofski/p2e_mons" 
	targetNamespace='https://github.com/dwugofski/p2e_mons'
	elementFormDefault="qualified">

	<!--
		Lowercase text is used, particularly with traits, when a text item may be processed behind the scenes

		This simple type is simply a lowercase-only token
	-->
	<xs:simpleType name="lower">
		<xs:restriction base="xs:token">
			<xs:pattern value="([^A-Z]+)"/>
		</xs:restriction>
	</xs:simpleType>

	<!--
		The idString type is used to format xml-relevant ids

		This simple type is lowercase, must not start with a number, and may only contain letters, numbers, and underscores
	-->
	<xs:simpleType name="idString">
		<xs:restriction base="lower">
			<xs:pattern value="([a-z_][a-z0-9_]+)"/>
		</xs:restriction>
	</xs:simpleType>

	<!--
		The idString type is used to format xml-relevant ids

		This simple type is lowercase, must not start with a number, and may only contain letters, numbers, and underscores
	-->
	<xs:simpleType name="strict_integer">
		<xs:restriction base="xs:integer">
			<xs:pattern value="-?[0-9]*"/>
		</xs:restriction>
	</xs:simpleType>

	<!--
		A text modifier is used to change the way text is displayed.

		This mixed complex type can contain
			[b]+ - textModifier
			[i]+ - textModifier
			[ul]+
				1. [li]+ - textModifier
			[ol]+
				1. [li]+ - textModifier
	-->
	<xs:complexType name="textModifier" mixed="true">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="b" type="textModifier" />
			<xs:element name="i" type="textModifier" />
			<xs:element name="ul">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="li" type="textModifier" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ol">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="li" type="textModifier" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<!--
		The descText type is used complex descriptions (e.g. for feats). These descriptions can contain named entries for roll results.

		This mixed complex type can contain
			[b]+ - textModifier
			[i]+ - textModifier
			[ul]+
				1. [li]+ - textModifier
			[ol]+
				1. [li]+ - textModifier
			[entry]+
				1. name - token
				2. description - descText
	-->
	<xs:complexType name="descText" mixed="true">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="b" type="textModifier" />
			<xs:element name="i" type="textModifier" />
			<xs:element name="ul">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="li" type="textModifier" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ol">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="li" type="textModifier" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="entry">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="name" type="xs:token"/>
						<xs:element name="description" type="descText"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<!-- 
		The itemText type is used to express an item. It can contain italicized or unmodified text. Each item has its own element

		This mixed complex type can contain
			[i]+ - token
	-->
	<xs:complexType name="itemText" mixed="true">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="i" type="xs:token" />
		</xs:choice>
	</xs:complexType>

	<!--
		The traitList type is used to collect traits describing something

		This complex type can contain
			[trait]+ - lower
	-->
	<xs:complexType name="traitList">
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="trait" type="lower"/>
		</xs:choice>
	</xs:complexType>

	<!-- 
		The quantityGroup group encapsulates the requirements to specify a quantity

		This group includes
			base - integer
			[modifier] - token
			[traits] - traitList
	-->
	<xs:group name="quantityGroup">
		<xs:sequence>
			<xs:element name="base" type="strict_integer"/>
			<xs:element name="modifier" minOccurs="0" maxOccurs="unbounded" type="xs:token"/>
			<xs:element name="traits" minOccurs="0" type="traitList"/>
			<xs:element name="specials" minOccurs="0">
				<xs:complexType>
					<xs:choice minOccurs="1" maxOccurs="unbounded">
						<xs:element name="special" type="descText"/>
					</xs:choice>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:group>

	<!--
		The quantityType type specifies a quantity and is a type extension to the quantityGroup

		This complex type contains
			~quantityGroup~
	-->
	<xs:complexType name="quantityType">
		<xs:group ref="quantityGroup"/>
	</xs:complexType>

	<!--
		The namedQuantity type specifies a quantity under a given name

		This complex type contains
			1.
				1. name - token
			2. ~quantityGroup~
	-->
	<xs:complexType name="namedQuantity">
		<xs:sequence>
			<xs:sequence>
				<xs:element name="name" type="xs:token"/>
			</xs:sequence>
			<xs:group ref="quantityGroup"/>
		</xs:sequence>
	</xs:complexType>


	<!--
		The rarityLevel type is used to specify a thing's rarity

		This simple type is an extension of the lower type and contains the following options
			common | uncommon | rare | legendary | unique
	-->
	<xs:simpleType name="rarityLevel">
		<xs:restriction base="lower">
			<xs:enumeration value="common"/>
			<xs:enumeration value="uncommon"/>
			<xs:enumeration value="rare"/>
			<xs:enumeration value="legendary"/>
			<xs:enumeration value="unique"/>
		</xs:restriction>
	</xs:simpleType>

	<!--
		The alignmentString type is used to specify a creature's alignment

		This simple type is an extension of the lower type and contains the following options
			{<l|n|c><g|n|e>} - {nn} + {n}
	-->
	<xs:simpleType name="alignmentString">
		<xs:restriction base="lower">
			<xs:enumeration value="lg"/>
			<xs:enumeration value="ng"/>
			<xs:enumeration value="cg"/>
			<xs:enumeration value="ln"/>
			<xs:enumeration value="n"/>
			<xs:enumeration value="cn"/>
			<xs:enumeration value="le"/>
			<xs:enumeration value="ne"/>
			<xs:enumeration value="ce"/>
		</xs:restriction>
	</xs:simpleType>

	<!--
		The sizeString type is used to specify a creature's size

		This simple type is an extension of the lower type and contains the following options
			tiny | small | medium | large | huge | gargantuan
	-->
	<xs:simpleType name="sizeString">
		<xs:restriction base="lower">
			<xs:enumeration value="tiny"/>
			<xs:enumeration value="small"/>
			<xs:enumeration value="medium"/>
			<xs:enumeration value="large"/>
			<xs:enumeration value="huge"/>
			<xs:enumeration value="gargantuan"/>
		</xs:restriction>
	</xs:simpleType>

	<!--
		The namedEntry type is used to specify a thing with a name and a description (e.g. an interaction ability)

		This complex type contains
			name - token
			description - descText
	-->
	<xs:complexType name="namedEntry">
		<xs:all>
			<xs:element name="name" type="xs:token"/>
			<xs:element name="description" type="descText"/>
		</xs:all>
	</xs:complexType>

	<!--
		The specialSpeeds type is used to specify a speed of a creature

		This complexType contains
			1. name - lower
			2. ~quantityGroup~
			3. [units] - lower
	-->
	<xs:complexType name="specialSpeeds">
		<xs:sequence>
			<xs:element name="name" type="lower"/>
			<xs:group ref="quantityGroup"/>
			<xs:element name="units" type="lower" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>

	<!--
		The actionCount type is used to specify the number of actions a feat or action takes

		This simpleType is a union of a lower type and a positive integer which can take the values
			free | passive | reaction | 1-3
	-->
	<xs:simpleType name="actionCount">
		<xs:union>
			<xs:simpleType>
				<xs:restriction base="lower">
					<xs:enumeration value="reaction"/>
					<xs:enumeration value="passive"/>
					<xs:enumeration value="free"/>
				</xs:restriction>
			</xs:simpleType>
			<xs:simpleType>
				<xs:restriction base="xs:positiveInteger">
					<xs:maxInclusive value="3"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>

	<!--
		The featSummary type is used to summarize a feat
		
		This complex type can contain
			1. name - token
			2. count - actionCount
			3. [description] - descText
			4. [traits] - traitList
	-->
	<xs:complexType name="featSummary">
		<xs:sequence>
			<xs:element name="name" type="xs:token"/>
			<xs:element name="count" type="actionCount"/>
			<xs:element name="description" type="descText" minOccurs="0"/>
			<xs:element name="traits" type="traitList" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>

	<!--
		A diceRoll element is used to display the result of a dice roll

		This simple type can take the form
			<number of dice>d<2|3|4|6|8|12|20|100>[<+|-><modifier>] | <flat value>
	-->
	<xs:simpleType name="diceRoll">
		<xs:restriction base="xs:token">
			<xs:pattern value="(([0-9]+d(2|3|4|6|8|10|12|20|100)((\+|\-)[0-9]+)?)|[0-9]+)"/>
		</xs:restriction>
	</xs:simpleType>

	<!--
		A builtinEffect is an effect which can come from a creature attack that is common among creatures

		It contains the following string options:
			* Grab
	-->
	<xs:simpleType name="builtinEffect">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Grab"/>
		</xs:restriction>
	</xs:simpleType>

	<!--
		A resultList is a list of results coming from a hostile action. This mostly include damage and secondary effects

		This complexType is a list containing at least one of the following:
			* [damage]+
				1. dice - diceRoll
				2. type - lower
			* [effect]+ - lower | builtinEffect
	-->
	<xs:complexType name="resultList">
		<xs:choice minOccurs="1" maxOccurs="unbounded">
			<xs:element name="damage">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="dice" type="diceRoll"/>
						<xs:element name="type" type="lower"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="effect">
				<xs:simpleType>
					<xs:union memberTypes="lower builtinEffect"/>
				</xs:simpleType>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<!--
		An attackSummary is the summary description of an attack action. Attack actions may result in damage and/or an effect

		This complexType takes the form
			1. type - string with options
				* 'melee'
				* 'range'
			2. count - actionCount
			3. name - token
			4. modifier - integer
			5. [traits] - traitList
			6. results - resultList
	-->
	<xs:complexType name="attackSummary">
		<xs:sequence>
			<xs:element name="type">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="melee"/>
						<xs:enumeration value="ranged"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="count" type="actionCount"/>
			<xs:element name="name" type="xs:token"/>
			<xs:element name="modifier" type="xs:integer"/>
			<xs:element name="traits" type="traitList" minOccurs="0"/>
			<xs:element name="results" type="resultList"/>
		</xs:sequence>
	</xs:complexType>

	<!--
		A constrictSummary is the summary description of the Constrict action

		This complexType takes the form
			1. results - resultList
			2. base - integer
			3. qualifier - lower
	-->
	<xs:complexType name="constrictSummary">
		<xs:sequence>
			<xs:element name="results" type="resultList"/>
			<xs:element name="base" type="xs:integer"/>
			<xs:element name="qualifier" type="lower" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>

	<xs:simpleType name="spellTradition">
		<xs:restriction base="lower">
			<xs:enumeration value="arcane"/>
			<xs:enumeration value="divine"/>
			<xs:enumeration value="occult"/>
			<xs:enumeration value="primal"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="spellcasterType">
		<xs:restriction base="lower">
			<xs:enumeration value="prepared"/>
			<xs:enumeration value="spontaneous"/>
			<xs:enumeration value="innate"/>
			<xs:enumeration value="ritual"/>
			<xs:enumeration value="focus"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="spellLevel">
		<xs:union>
			<xs:simpleType>
				<xs:restriction base="lower">
					<xs:enumeration value="cantrip"/>
					<xs:enumeration value="continuous"/>
				</xs:restriction>
			</xs:simpleType>
			<xs:simpleType>
				<xs:restriction base="xs:positiveInteger">
					<xs:maxInclusive value="10"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>

	<xs:simpleType name="spellSlotCount">
		<xs:union>
			<xs:simpleType>
				<xs:restriction base="lower">
					<xs:enumeration value="at will"/>
				</xs:restriction>
			</xs:simpleType>
			<xs:simpleType>
				<xs:restriction base="xs:positiveInteger"/>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>

	<xs:complexType name="spellSpec">
		<xs:sequence>
			<xs:element name="name" type="xs:token"/>
			<xs:element name="slots" type="spellSlotCount" minOccurs="0"/>
			<xs:element name="comment" type="xs:token" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="spellLevelGroup">
		<xs:sequence>
			<xs:element name="level" type="spellLevel"/>
			<xs:element name="height" minOccurs="0">
				<xs:simpleType>
					<xs:restriction base="xs:positiveInteger">
						<xs:minInclusive value="1"/>
						<xs:maxInclusive value="10"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="slots" type="spellSlotCount" minOccurs="0"/>
			<xs:element name="spell" type="spellSpec" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="spellRepertoireSummary">
		<xs:sequence>
			<xs:element name="tradition" type="spellTradition"/>
			<xs:element name="type" type="spellcasterType"/>
			<xs:element name="difficulty" type="xs:positiveInteger"/>
			<xs:element name="attack" type="quantityType" minOccurs="0"/>
			<xs:element name="group" maxOccurs="unbounded" type="spellLevelGroup"/>
		</xs:sequence>
	</xs:complexType>

<!--=========================================================================-->
<!-- MAIN TEMPLATE ==========================================================-->
<!--=========================================================================-->
	<xs:element name="p2emon">
		<xs:complexType>
			<xs:all>
				<xs:element name="name" type="xs:token"/>
				<xs:element name="level" type="xs:integer"/>
				<xs:element name="rarity" type="rarityLevel"/>
				<xs:element name="alignment" type="alignmentString"/>
				<xs:element name="size" type="sizeString"/>
				<xs:element name="types">
					<xs:complexType>
						<xs:choice minOccurs="1" maxOccurs="unbounded">
							<xs:element name="type" type="xs:token" />
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="traits" type="traitList"/>
				<xs:element name="perception" type="quantityType"/>
				<xs:element name="languages">
					<xs:complexType>
						<xs:choice minOccurs="0" maxOccurs="unbounded">
							<xs:element name="language" type="xs:token" />
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="skills">
					<xs:complexType>
						<xs:choice minOccurs="0" maxOccurs="unbounded">
							<xs:element name="skill" type="namedQuantity"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="abilities">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="strength" type="quantityType"/>
							<xs:element name="dexterity" type="quantityType"/>
							<xs:element name="constitution" type="quantityType"/>
							<xs:element name="intelligence" type="quantityType"/>
							<xs:element name="wisdom" type="quantityType"/>
							<xs:element name="charisma" type="quantityType"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="items">
					<xs:complexType>
						<xs:choice minOccurs="0" maxOccurs="unbounded">
							<xs:element name="item" type="itemText"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="interactions">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="feat" type="featSummary" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="armor" type="quantityType"/>
				<xs:element name="saves">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="fortitude" type="quantityType"/>
							<xs:element name="reflex" type="quantityType"/>
							<xs:element name="will" type="quantityType"/>
							<xs:element name="modifier" type="xs:token" minOccurs="0"/>
							<xs:element name="specials" minOccurs="0">
								<xs:complexType>
									<xs:choice minOccurs="1" maxOccurs="unbounded">
										<xs:element name="special" type="descText"/>
									</xs:choice>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="hitpoints" type="quantityType"/>
				<xs:element name="hardness" type="quantityType" minOccurs="0"/>
				<xs:element name="immunities">
					<xs:complexType>
						<xs:choice minOccurs="0" maxOccurs="unbounded">
							<xs:element name="immunity" type="lower"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="weaknesses">
					<xs:complexType>
						<xs:choice minOccurs="0" maxOccurs="unbounded">
							<xs:element name="weakness" type="namedQuantity"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="resistances">
					<xs:complexType>
						<xs:choice minOccurs="0" maxOccurs="unbounded">
							<xs:element name="resistance" type="namedQuantity"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="offturn">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="feat" type="featSummary" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="speeds">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="units" type="lower"/>
							<xs:element name="speed" type="specialSpeeds" minOccurs="0" maxOccurs="unbounded"/>
							<xs:element name="special" type="descText" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="actions">
					<xs:complexType>
						<xs:choice minOccurs="0" maxOccurs="unbounded">
							<xs:element name="attack" type="attackSummary" maxOccurs="unbounded"/>
							<xs:element name="constrict" type="constrictSummary" maxOccurs="unbounded"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="spells">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="spelllist" type="spellRepertoireSummary" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="onturn">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="feat" type="featSummary" minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:all>
			<xs:attribute name="id" type="idString"/>
		</xs:complexType>
	</xs:element>
</xs:schema>